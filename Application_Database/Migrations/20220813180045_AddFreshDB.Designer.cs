// <auto-generated />
using System;
using Users_Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Users_Database.Migrations
{
    [DbContext(typeof(User_DbContext))]
    [Migration("20220813180045_AddFreshDB")]
    partial class AddFreshDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Users_Database.AdminBranch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CompId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsHo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrgProdId")
                        .HasColumnType("int");

                    b.HasKey("BranchId");

                    b.HasIndex(new[] { "CompId" }, "IX_AdminBranch_CompId");

                    b.HasIndex(new[] { "OrgProdId" }, "IX_AdminBranch_OrgProdId");

                    b.ToTable("AdminBranch");
                });

            modelBuilder.Entity("Users_Database.AdminCompany", b =>
                {
                    b.Property<int>("CompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompId"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrgProdId")
                        .HasColumnType("int");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompId");

                    b.HasIndex(new[] { "OrgProdId" }, "IX_AdminCompany_OrgProdId");

                    b.ToTable("AdminCompany");
                });

            modelBuilder.Entity("Users_Database.AdminMenu", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSysAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ParentMenuId")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.ToTable("AdminMenu");
                });

            modelBuilder.Entity("Users_Database.AdminOrganization", b =>
                {
                    b.Property<int>("OrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrgId"), 1L, 1);

                    b.Property<int?>("AlloweNoBranch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((2))");

                    b.Property<int?>("AlloweNoComp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((2))");

                    b.Property<int?>("AlloweNoUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((5))");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsCompProductWise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsMasterCompWise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrgEmail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("OrgId");

                    b.ToTable("AdminOrganization");
                });

            modelBuilder.Entity("Users_Database.AdminOrgProduct", b =>
                {
                    b.Property<int>("OrgProdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrgProdId"), 1L, 1);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Orgid")
                        .HasColumnType("int");

                    b.Property<int>("ProdId")
                        .HasColumnType("int");

                    b.HasKey("OrgProdId");

                    b.HasIndex(new[] { "Orgid" }, "IX_AdminOrgProduct_Orgid");

                    b.HasIndex(new[] { "ProdId" }, "IX_AdminOrgProduct_ProdId");

                    b.ToTable("AdminOrgProduct");
                });

            modelBuilder.Entity("Users_Database.AdminProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProductId");

                    b.ToTable("AdminProduct");
                });

            modelBuilder.Entity("Users_Database.AdminRights", b =>
                {
                    b.Property<int>("RightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RightId"), 1L, 1);

                    b.Property<bool?>("AddAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("DeleteAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("EditAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool?>("ViewAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("RightId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("AdminRights");
                });

            modelBuilder.Entity("Users_Database.AdminRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrgProdId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.HasIndex(new[] { "OrgProdId" }, "IX_AdminRole_OrgProdId");

                    b.ToTable("AdminRole");
                });

            modelBuilder.Entity("Users_Database.AdminUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginMail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LoginPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrgProdId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "OrgProdId" }, "IX_AdminUser_OrgProdId");

                    b.ToTable("AdminUser");
                });

            modelBuilder.Entity("Users_Database.AdminUserBranch", b =>
                {
                    b.Property<int>("Userbranchid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Userbranchid"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("OrgProdId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Userbranchid");

                    b.HasIndex(new[] { "BranchId" }, "IX_AdminUserBranch_BranchId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_AdminUserBranch_CompanyId");

                    b.HasIndex(new[] { "OrgProdId" }, "IX_AdminUserBranch_OrgProdId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AdminUserBranch_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_AdminUserBranch_UserId");

                    b.ToTable("AdminUserBranch");
                });

            modelBuilder.Entity("Users_Database.StatusNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FailDetails")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MsgBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MsgCC")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MsgFrom")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MsgSatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MsgSubject")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MsgTo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MsgType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("StatusNotification");
                });

            modelBuilder.Entity("Users_Database.AdminBranch", b =>
                {
                    b.HasOne("Users_Database.AdminCompany", "Comp")
                        .WithMany("AdminBranch")
                        .HasForeignKey("CompId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminBranch_AdminCompany");

                    b.HasOne("Users_Database.AdminOrgProduct", "OrgProd")
                        .WithMany("AdminBranch")
                        .HasForeignKey("OrgProdId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminBranch_AdminOrgProduct");

                    b.Navigation("Comp");

                    b.Navigation("OrgProd");
                });

            modelBuilder.Entity("Users_Database.AdminCompany", b =>
                {
                    b.HasOne("Users_Database.AdminOrgProduct", "OrgProd")
                        .WithMany("AdminCompany")
                        .HasForeignKey("OrgProdId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminCompany_AdminOrgProduct");

                    b.Navigation("OrgProd");
                });

            modelBuilder.Entity("Users_Database.AdminOrgProduct", b =>
                {
                    b.HasOne("Users_Database.AdminOrganization", "Org")
                        .WithMany("AdminOrgProduct")
                        .HasForeignKey("Orgid")
                        .IsRequired()
                        .HasConstraintName("FK_AdminOrgProduct_AdminOrganization");

                    b.HasOne("Users_Database.AdminProduct", "Prod")
                        .WithMany("AdminOrgProduct")
                        .HasForeignKey("ProdId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminOrgProduct_AdminProduct");

                    b.Navigation("Org");

                    b.Navigation("Prod");
                });

            modelBuilder.Entity("Users_Database.AdminRights", b =>
                {
                    b.HasOne("Users_Database.AdminMenu", "Menu")
                        .WithMany("AdminRights")
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminRights_AdminMenu");

                    b.HasOne("Users_Database.AdminRole", "Role")
                        .WithMany("AdminRights")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminRights_AdminRole");

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Users_Database.AdminRole", b =>
                {
                    b.HasOne("Users_Database.AdminOrgProduct", "OrgProd")
                        .WithMany("AdminRole")
                        .HasForeignKey("OrgProdId")
                        .HasConstraintName("FK_AdminRole_AdminOrgProduct");

                    b.Navigation("OrgProd");
                });

            modelBuilder.Entity("Users_Database.AdminUser", b =>
                {
                    b.HasOne("Users_Database.AdminOrgProduct", "OrgProd")
                        .WithMany("AdminUser")
                        .HasForeignKey("OrgProdId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminUser_AdminOrgProduct");

                    b.Navigation("OrgProd");
                });

            modelBuilder.Entity("Users_Database.AdminUserBranch", b =>
                {
                    b.HasOne("Users_Database.AdminBranch", "Branch")
                        .WithMany("AdminUserBranch")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminUserBranch_AdminBranch");

                    b.HasOne("Users_Database.AdminCompany", "Company")
                        .WithMany("AdminUserBranch")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminUserBranch_AdminCompany");

                    b.HasOne("Users_Database.AdminOrgProduct", "OrgProd")
                        .WithMany("AdminUserBranch")
                        .HasForeignKey("OrgProdId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminUserBranch_AdminOrgProduct");

                    b.HasOne("Users_Database.AdminRole", "Role")
                        .WithMany("AdminUserBranch")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminUserBranch_AdminRole");

                    b.HasOne("Users_Database.AdminUser", "User")
                        .WithMany("AdminUserBranch")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminUserBranch_AdminUser");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("OrgProd");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Users_Database.AdminBranch", b =>
                {
                    b.Navigation("AdminUserBranch");
                });

            modelBuilder.Entity("Users_Database.AdminCompany", b =>
                {
                    b.Navigation("AdminBranch");

                    b.Navigation("AdminUserBranch");
                });

            modelBuilder.Entity("Users_Database.AdminMenu", b =>
                {
                    b.Navigation("AdminRights");
                });

            modelBuilder.Entity("Users_Database.AdminOrganization", b =>
                {
                    b.Navigation("AdminOrgProduct");
                });

            modelBuilder.Entity("Users_Database.AdminOrgProduct", b =>
                {
                    b.Navigation("AdminBranch");

                    b.Navigation("AdminCompany");

                    b.Navigation("AdminRole");

                    b.Navigation("AdminUser");

                    b.Navigation("AdminUserBranch");
                });

            modelBuilder.Entity("Users_Database.AdminProduct", b =>
                {
                    b.Navigation("AdminOrgProduct");
                });

            modelBuilder.Entity("Users_Database.AdminRole", b =>
                {
                    b.Navigation("AdminRights");

                    b.Navigation("AdminUserBranch");
                });

            modelBuilder.Entity("Users_Database.AdminUser", b =>
                {
                    b.Navigation("AdminUserBranch");
                });
#pragma warning restore 612, 618
        }
    }
}
