// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Application_Database;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Application_Database
{
    public partial class APP_DbContext
    {
        private APP_DbContextProcedures _procedures;

        public virtual APP_DbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new APP_DbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public APP_DbContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<sp_AdminOrganization_InsertResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GenerateSPforInsertUpdateDeleteResult>().HasNoKey().ToView(null);
        }
    }

    public interface IAPP_DbContextProceduresContract
    {
        Task<List<sp_AdminOrganization_InsertResult>> sp_AdminOrganization_InsertAsync(string OrgName, string OrgEmail, CancellationToken cancellationToken = default);
        Task<List<sp_GenerateSPforInsertUpdateDeleteResult>> sp_GenerateSPforInsertUpdateDeleteAsync(string Schemaname, string Tablename, string ProcName, bool? IdentityInsert, CancellationToken cancellationToken = default);
    }

    public partial class APP_DbContextProcedures
    {
        private readonly APP_DbContext _context;

        public APP_DbContextProcedures(APP_DbContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_AdminOrganization_InsertResult>> sp_AdminOrganization_InsertAsync(string OrgName, string OrgEmail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrgName",
                    Size = 800,
                    Value = OrgName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgEmail",
                    Size = 2000,
                    Value = OrgEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_AdminOrganization_InsertResult>("EXEC @returnValue = [dbo].[sp_AdminOrganization_Insert] @OrgName, @OrgEmail", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GenerateSPforInsertUpdateDeleteResult>> sp_GenerateSPforInsertUpdateDeleteAsync(string Schemaname, string Tablename, string ProcName, bool? IdentityInsert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Schemaname",
                    Size = 256,
                    Value = Schemaname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Tablename",
                    Size = 256,
                    Value = Tablename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcName",
                    Size = 256,
                    Value = ProcName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdentityInsert",
                    Value = IdentityInsert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GenerateSPforInsertUpdateDeleteResult>("EXEC @returnValue = [dbo].[sp_GenerateSPforInsertUpdateDelete] @Schemaname, @Tablename, @ProcName, @IdentityInsert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
